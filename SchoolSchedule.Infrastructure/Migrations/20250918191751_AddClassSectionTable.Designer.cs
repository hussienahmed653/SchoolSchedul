// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolSchedule.Infrastructure.DbConext;

#nullable disable

namespace SchoolSchedule.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918191751_AddClassSectionTable")]
    partial class AddClassSectionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolSchedule.Domain.ClassSection", b =>
                {
                    b.Property<int>("ClassSectionId")
                        .HasColumnType("int");

                    b.Property<Guid>("ClassSectionGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassSectionId");

                    b.HasIndex("GradeId", "SectionName")
                        .IsUnique();

                    b.ToTable("ClassSection");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Departement", b =>
                {
                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<Guid>("DepartementGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("DepartementName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.HasKey("DepartementId");

                    b.HasIndex("GradeId");

                    b.ToTable("Departements");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<Guid>("GradeGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("GradeYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfGrades")
                        .HasColumnType("int");

                    b.HasKey("GradeId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.SchoolWeek", b =>
                {
                    b.Property<int>("SchoolWeekId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolWeekDay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SchoolWeekGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SchoolWeekId");

                    b.ToTable("SchoolWeeks");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.SubjectAssignment", b =>
                {
                    b.Property<int>("SubjectAssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ClassSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<int>("EvenOrOdd")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectAssignmentGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("SubjectAssignmentId");

                    b.HasIndex("ClassSectionId");

                    b.HasIndex("DepartementId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId", "GradeId", "DepartementId", "EvenOrOdd", "Amount")
                        .IsUnique();

                    b.ToTable("SubjectAssignments");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.ClassSection", b =>
                {
                    b.HasOne("SchoolSchedule.Domain.Grade", "Grade")
                        .WithMany("ClassSections")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Departement", b =>
                {
                    b.HasOne("SchoolSchedule.Domain.Grade", "Grade")
                        .WithMany("Departements")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.SubjectAssignment", b =>
                {
                    b.HasOne("SchoolSchedule.Domain.ClassSection", "ClassSection")
                        .WithMany("Assignments")
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSchedule.Domain.Departement", "Departement")
                        .WithMany("Assignments")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSchedule.Domain.Grade", "Grade")
                        .WithMany("Assignments")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSchedule.Domain.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ClassSection");

                    b.Navigation("Departement");

                    b.Navigation("Grade");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.UserRole", b =>
                {
                    b.HasOne("SchoolSchedule.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSchedule.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.ClassSection", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Departement", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Grade", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ClassSections");

                    b.Navigation("Departements");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.Subject", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("SchoolSchedule.Domain.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
